class Solution {
    int[] id, sz;
    public int find(int p) {
        while (p != id[p]) {
            id[p] = id[id[p]];
            p = id[p];
        }
        return p;
    }

    public void union(int p, int q) {
        int pId = find(p), qId = find(q);
        if (pId == qId) return;
        if (sz[pId] < sz[qId]) {
            sz[qId] += sz[pId];
            id[pId] = qId;
        } else {
            sz[pId] += sz[qId];
            id[qId] = pId;
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        id = new int[n];
        sz = new int[n];
        for (int i = 0; i < n; i++) {
            id[i] = i;
            sz[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) union(i, j);
            }
        }
        int[] count = new int[n];
        for (int node : initial) {
            count[find(node)]++;
        }
        int resSize = -1, res = -1;
        for (int node : initial) {
            int nodeId = find(node);
            if (count[nodeId] == 1) {
                int nodeSize = sz[nodeId];
                if (nodeSize > resSize) {
                    resSize = nodeSize;
                    res = node;
                } else if (nodeSize == resSize && node < res) {
                    res = node;
                }
            }
        }
        if (res == -1) {
            res = n + 1;
            for (int node : initial) res = Math.min(res, node);
        }
        return res;
    }
}