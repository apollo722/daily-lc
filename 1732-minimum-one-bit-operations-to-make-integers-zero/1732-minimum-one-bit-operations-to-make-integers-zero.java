class Solution {
    public int minimumOneBitOperations(int n) {
        if (n == 0) return 0;
        int k = 0, cur = 1;
        while (cur <= n) {
            cur *= 2;
            k++;
        }
        return (1 << k) - 1 - minimumOneBitOperations((cur / 2) ^ n);
    }
}
/*
0 - 0
1 - 1 - 2^1 - 1
10 2 - 3 - 2^2 - 1
11 - 2
100 4 - 101 111 110 010 011 001 000 = 7 2^3 - 1
101 - 6
110 - 4
111 - 5
1000 8 - 1001 1011 1010 1110 1111 1101 1100 0100 = 8 + 7 = 15 2^4 - 1
1001 14
1010 12
1011 13
1100 8
1101 9
1110 11
1111 10
10000 16 - 31 - 2^5 - 1
10001 17 30
10010 18 28
10011 19 29
10100 20 24 
10101 21 25
10110 22 27
10111 23 26
11000 24 16
11001 25 17
11010 26 19
11011 27 18
11100 28 23
11101 29 22
11110 30 20
11111 31 21
*/